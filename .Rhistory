return(rr)
}
Validation.result = fnValidation(top.significant.biomarkers, validation.cut.off = 5)
WriteXLS::WriteXLS("Validation.result", ExcelFileName=file.path(path.diagrams, "top.biomarkers.gray.xlsx"), row.names=TRUE)
drug = "drugid_17AAG"; tissue.type = "all"; drug.name = gsub("drugid_","", drug)
biomarkers = fnFetchBiomarkersToValdiate(top.significant.biomarkers, drug = "drugid_17AAG", indices = 1:4)
fnPlotAUCoverCellLinesCCLE.CGP(drug, tissue.type = "all", biomarkers)
fnPlotAUCoverCellLinesGray(drug, tissue.type = "breast", biomarkers)
fnPlotAUCoverCellLinesCCLE.CGP(drug, tissue.type = "breast", biomarkers)
fnPlotAUCoverCellLinesGray(drug, tissue.type = "breast", biomarkers)
biomarker
fnPlotAUCoverCellLinesCCLE.CGP <- function(drug, tissue.type, biomarkers)
{
ccle.sensitivity <- subset(ccle.drug.sensitivity, !is.na(ccle.drug.sensitivity[,drug]), select = drug)
sensitivity = cbind(ccle.sensitivity, cgp.drug.sensitivity[rownames(ccle.sensitivity),drug],ccle.drug.tissuetype[rownames(ccle.sensitivity),"tissue.type"])
colnames(sensitivity) = c("ccle.AUC","cgp.AUC","tissue.type")
rownames(sensitivity) = rownames(ccle.sensitivity)
tissue.type.str = ""
if(tissue.type != "all")
{
sensitivity = sensitivity[which(sensitivity$tissue.type == tissue.type),]
tissue.type.str = sprintf("in %s cell lines", tissue.type)
}
sensitivity[,"col"] = "#000000"
sensitivity = sensitivity[order(sensitivity[,"cgp.AUC"]),]
sensitivity[!is.na(sensitivity[,"cgp.AUC"]),"col"] = colorRampPalette(c("blue","light blue","red"))(nrow(sensitivity[!is.na(sensitivity[,"cgp.AUC"]),]))
sensitivity = sensitivity[order(sensitivity[,"ccle.AUC"]),]
exp.db = NULL;
exp.col = NULL;
for (i in 1:length(biomarkers))
{
if (biomarkers[[i]]$type == "isoform")
{
exp.db = cbind(exp.db, ccle.drug.rnaseq.isoforms.fpkm[rownames(sensitivity),biomarkers[[i]]$isoform.id])
}else{
exp.db = cbind(exp.db, ccle.drug.rnaseq.genes.fpkm[rownames(sensitivity),biomarkers[[i]]$gene.id])
}
exp.col = c(exp.col, exp.db[,i])
}
names(exp.col) = 1:length(exp.col)
exp.col = data.frame("exp" = exp.col, "col" ="#000000" )
exp.col = exp.col[order(exp.col[,"exp"]),]
exp.col[,"col"] = colorRampPalette(c("blue","white","red"))(nrow(exp.col))
rownames(exp.db) = rownames(sensitivity)
colnames(exp.db) = sapply(biomarkers,function(x){x[["short.label"]]})
my.xlim = c(1,nrow(sensitivity))
my.ylim = range(sensitivity[,1])
color.scheme <- rgb( seq(0,1,length=256),  # Red
seq(0,1,length=256),  # Green
seq(1,0,length=256))  # Blue
pdf(file = file.path(path.diagrams, sprintf("AUC_%s_%s.pdf",dataset.name, gsub("drugid_","",drug))), height=6, width=12)
par(mfrow=c(2,1))
image(exp.db, col = color.scheme, axes = FALSE)
grid(nx = nrow(exp.db), ny = ncol(exp.db), lty = 1)
if(ncol(exp.db) != 1){at.place = (0:(ncol(exp.db) - 1))/(ncol(exp.db) - 1)}else{at.place = .5}
axis(2,at = at.place, labels=colnames(exp.db), las=2, cex.axis = .6, tick = FALSE)
#plot(1:nrow(sensitivity),sensitivity[,1], type = "l", xlim = my.xlim, ylim = my.ylim, xlab="cell lines", ylab=colnames(sensitivity)[1],main = sprintf("%s AUC over %s cell lines in %s", toupper(dataset.name), tissue.type, gsub("drugid_","",drug)), cex.main = .9)
plot(NA, xlim = my.xlim, ylim = my.ylim,ylab='',xlab='', axes = FALSE)
axis(1,at = 1:nrow(sensitivity), labels=rownames(sensitivity), las = 2, cex.axis = .5, tck = -.05)
axis(2,at = sensitivity[,"ccle.AUC"], labels=sensitivity[,"ccle.AUC"], cex.axis = .5, tck = -.02)
box(lty = 1)
points(1:nrow(sensitivity),sensitivity[,"ccle.AUC"], pch = 20,col = sensitivity[,"col"])
dev.off()
}
fnPlotAUCoverCellLinesGray <- function(drug, tissue.type, biomarkers)
{
sensitivity <- subset(gray.drug.sensitivity, !is.na(gray.drug.sensitivity[,drug]), select = drug)
sensitivity = cbind(sensitivity , "col" = "#000000")
sensitivity = sensitivity[order(sensitivity[,drug]),]
sensitivity = subset(sensitivity, rownames(sensitivity) %in% rownames(gray.drug.rnaseq.genes.fpkm))
exp.db = NULL;
exp.col = NULL;
for (i in 1:length(biomarkers))
{
if (biomarkers[[i]]$type == "isoform")
{
exp.db = cbind(exp.db, gray.drug.rnaseq.isoforms.fpkm[rownames(sensitivity),biomarkers[[i]]$isoform.id])
}else{
exp.db = cbind(exp.db, gray.drug.rnaseq.genes.fpkm[rownames(sensitivity),biomarkers[[i]]$gene.id])
}
exp.col = c(exp.col, exp.db[,i])
}
names(exp.col) = 1:length(exp.col)
exp.col = data.frame("exp" = exp.col, "col" ="#000000" )
exp.col = exp.col[order(exp.col[,"exp"]),]
exp.col[,"col"] = colorRampPalette(c("blue","white","red"))(nrow(exp.col))
rownames(exp.db) = rownames(sensitivity)
colnames(exp.db) = sapply(biomarkers, function(x){x[["short.label"]]})
my.xlim = c(1,nrow(sensitivity))
my.ylim = range(sensitivity[,1])
pdf(file = file.path(path.diagrams, sprintf("AUC_Gray_%s_%s.pdf",dataset.name, gsub("drugid_","",drug))), height=6, width=12)
par(mfrow=c(2,1))
image(exp.db, col = exp.col[,"col"], axes = FALSE)
grid(nx = nrow(exp.db), ny = ncol(exp.db), lty = 1)
axis(2,at = (0:(ncol(exp.db) - 1))/(ncol(exp.db) - 1), labels=colnames(exp.db), las=2, cex.axis = .6, tick = FALSE)
#plot(1:nrow(sensitivity),sensitivity[,1], type = "l", xlim = my.xlim, ylim = my.ylim, xlab="cell lines", ylab=colnames(sensitivity)[1],main = sprintf("%s AUC over %s cell lines in %s", toupper(dataset.name), tissue.type, gsub("drugid_","",drug)), cex.main = .9)
plot(NA, xlim = my.xlim, ylim = my.ylim,ylab='',xlab='', axes = FALSE)
axis(1,at = 1:nrow(sensitivity), labels=rownames(sensitivity), las = 2, cex.axis = .5, tck = -.05)
axis(2,at = sensitivity[,drug], labels=sensitivity[,drug], cex.axis = .5, tck = -.02)
box(lty = 1)
points(1:nrow(sensitivity),sensitivity[,drug], pch = 20, col = "#663399")
dev.off()
}
fnPlotAUCoverCellLinesCCLE.CGP(drug, tissue.type = "breast", biomarkers)
fnPlotAUCoverCellLinesGray(drug, tissue.type = "breast", biomarkers)
dim(cgp.drug.sensitivity)
options(echo=TRUE) # if you want see commands in output file
args <- commandArgs(trailingOnly = TRUE)
#print(args)
path.source <- file.path("Documents","CCLEDrug")#("","mnt","work1","users", "bhklab","Projects","sensitivity")# as.character(args[1])
target.folder <- file.path("Documents","CCLEDrug")#file.path("","mnt","work1", "users", "bhklab","Projects","sensitivity") #as.character(args[2])
source(file.path(path.source,"foo.sensitivity.R"))
path.data <- file.path(target.folder , "data")
if(!file.exists(path.data)) { dir.create(path.data, showWarnings=FALSE, recursive=TRUE) }
## download raw sensitivity data
archivn <- "CCLE_NP24.2009_Drug_data_2012.02.20.csv"
if(!file.exists(file.path(path.data, "dwl"))){dir.create(file.path(path.data, "dwl"), showWarnings=FALSE)}
myfn <- file.path(path.data, "dwl", archivn)
if (!file.exists(myfn)) {
dwl.status <- download.file(url="http://www.broadinstitute.org/ccle/downloadFile/DefaultSystemRoot/exp_10/ds_27/CCLE_NP24.2009_Drug_data_2012.02.20.csv?downloadff=true&fileId=2114", destfile=file.path(path.data, "dwl", archivn), quiet=TRUE)
if(dwl.status != 0) { stop("Download failed, please rerun the pipeline!") }
}
require(gdata) || stop("Library gdata is not available!")
ccle.raw.drug.sensitivity <- read.csv(myfn, stringsAsFactors = FALSE)
ccle.drug.sensitivity = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = 6))
rownames(ccle.drug.sensitivity) = 1:nrow(ccle.drug.sensitivity)
colnames(ccle.drug.sensitivity) = c("cellline","drug","AUC","AUC.original","slope","slope0")
template.doses = as.numeric(unlist(strsplit(ccle.raw.drug.sensitivity[1,"Doses..uM."], split=",")))
doses.NO = length(template.doses)
ccle.drug.sensitivity.detail = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = doses.NO*2 + 2))
rownames(ccle.drug.sensitivity.detail) = 1:nrow(ccle.drug.sensitivity.detail)
colnames(ccle.drug.sensitivity.detail)[1:2] = c("cellline","drug")
col.index = 2
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("log10_dose_%s",i)
}
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("viability_%s",i)
}
index = 1210
ccle.raw.drug.sensitivity[index,]
fncomputeSensitvity(as.data.frame(ccle.raw.drug.sensitivity[index,]), template.doses, "ccle")
for(index in 1:nrow(ccle.raw.drug.sensitivity))
{
ccle.drug.sensitivity[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
ccle.drug.sensitivity.detail[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity.detail[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
sensitivity = fncomputeSensitvity(as.data.frame(ccle.raw.drug.sensitivity[index,]), template.doses, "ccle")
ccle.drug.sensitivity[index,"AUC"] = sensitivity$AUC
ccle.drug.sensitivity[index,"AUC.original"] = fnComputeAUC.original.CCLE(sensitivity$drug.response)
ccle.drug.sensitivity[index,"slope"] = sensitivity$slope
ccle.drug.sensitivity[index,"slope0"] = sensitivity$slope0
for(k in 1:nrow(sensitivity$drug.response))
{
ccle.drug.sensitivity.detail[index,sprintf("log10_dose_%s",k)] = sensitivity$drug.response[k,"log10doses"]
ccle.drug.sensitivity.detail[index,sprintf("viability_%s",k)] = sensitivity$drug.response[k,"response1"]
}
}
path.result <- file.path(target.folder , "result")
if(!file.exists(path.result)) { dir.create(path.result, showWarnings=FALSE, recursive=TRUE) }
write.csv(ccle.drug.sensitivity, file = file.path(path.result,"ccle_sensitivity_broad.csv"))
write.csv(ccle.drug.sensitivity.detail, file = file.path(path.result,"ccle_sensitivity_detail_broad.csv"))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
options(echo=TRUE) # if you want see commands in output file
args <- commandArgs(trailingOnly = TRUE)
#print(args)
path.source <- file.path("Documents","CCLEDrug")#("","mnt","work1","users", "bhklab","Projects","sensitivity")# as.character(args[1])
target.folder <- file.path("Documents","CCLEDrug")#file.path("","mnt","work1", "users", "bhklab","Projects","sensitivity") #as.character(args[2])
source(file.path(path.source,"foo.sensitivity.R"))
path.data <- file.path(target.folder , "data")
if(!file.exists(path.data)) { dir.create(path.data, showWarnings=FALSE, recursive=TRUE) }
## download raw sensitivity data
archivn <- "CCLE_NP24.2009_Drug_data_2012.02.20.csv"
if(!file.exists(file.path(path.data, "dwl"))){dir.create(file.path(path.data, "dwl"), showWarnings=FALSE)}
myfn <- file.path(path.data, "dwl", archivn)
if (!file.exists(myfn)) {
dwl.status <- download.file(url="http://www.broadinstitute.org/ccle/downloadFile/DefaultSystemRoot/exp_10/ds_27/CCLE_NP24.2009_Drug_data_2012.02.20.csv?downloadff=true&fileId=2114", destfile=file.path(path.data, "dwl", archivn), quiet=TRUE)
if(dwl.status != 0) { stop("Download failed, please rerun the pipeline!") }
}
require(gdata) || stop("Library gdata is not available!")
ccle.raw.drug.sensitivity <- read.csv(myfn, stringsAsFactors = FALSE)
ccle.drug.sensitivity = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = 6))
rownames(ccle.drug.sensitivity) = 1:nrow(ccle.drug.sensitivity)
colnames(ccle.drug.sensitivity) = c("cellline","drug","AUC","AUC.original","slope","slope0")
template.doses = as.numeric(unlist(strsplit(ccle.raw.drug.sensitivity[1,"Doses..uM."], split=",")))
doses.NO = length(template.doses)
ccle.drug.sensitivity.detail = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = doses.NO*2 + 2))
rownames(ccle.drug.sensitivity.detail) = 1:nrow(ccle.drug.sensitivity.detail)
colnames(ccle.drug.sensitivity.detail)[1:2] = c("cellline","drug")
col.index = 2
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("log10_dose_%s",i)
}
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("viability_%s",i)
}
for(index in 1:nrow(ccle.raw.drug.sensitivity))
{
ccle.drug.sensitivity[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
ccle.drug.sensitivity.detail[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity.detail[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
sensitivity = fncomputeSensitvity(as.data.frame(ccle.raw.drug.sensitivity[index,]), template.doses, "ccle")
ccle.drug.sensitivity[index,"AUC"] = sensitivity$AUC
ccle.drug.sensitivity[index,"AUC.original"] = fnComputeAUC.original.CCLE(sensitivity$drug.response)
ccle.drug.sensitivity[index,"slope"] = sensitivity$slope
ccle.drug.sensitivity[index,"slope0"] = sensitivity$slope0
for(k in 1:nrow(sensitivity$drug.response))
{
ccle.drug.sensitivity.detail[index,sprintf("log10_dose_%s",k)] = sensitivity$drug.response[k,"log10doses"]
ccle.drug.sensitivity.detail[index,sprintf("viability_%s",k)] = sensitivity$drug.response[k,"response1"]
}
}
path.result <- file.path(target.folder , "result")
if(!file.exists(path.result)) { dir.create(path.result, showWarnings=FALSE, recursive=TRUE) }
write.csv(ccle.drug.sensitivity, file = file.path(path.result,"ccle_sensitivity_broad.csv"))
write.csv(ccle.drug.sensitivity.detail, file = file.path(path.result,"ccle_sensitivity_detail_broad.csv"))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
is.na(ccle.drug.sensitivity)
ccle.drug.sensitivity[is.na(ccle.drug.sensitivity$AUC),]
ccle.drug.sensitivity[!is.na(ccle.drug.sensitivity$AUC),]
ccle.drug.sensitivity = ccle.drug.sensitivity[!is.na(ccle.drug.sensitivity$AUC),]
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$slope0, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$slope0, y=ccle.drug.sensitivity$AUC.original,xlab="slope0", ylab="AUC", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
ccle.drug.sensitivity$AUC
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope/100,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", xlim = c(-.5,1), ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain", xlim = c(-.5,1))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
pdf(file = file.path(path.result,"Correlation_sensitivity_measurments.pdf"), height=7, width=7)
par(mfrow = c(2,2))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC.original, y=ccle.drug.sensitivity$slope0,xlab="AUC Published", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
dev.off()
pdf(file = file.path(path.result,"Correlation_sensitivity_measurments.pdf"), height=14, width=14)
par(mfrow = c(2,2))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC.original, y=ccle.drug.sensitivity$slope0,xlab="AUC Published", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
dev.off()
hist(ccle.drug.sensitivity$slope0, breaks = 100, main="CGP", xlab = "slope")
options(echo=TRUE) # if you want see commands in output file
args <- commandArgs(trailingOnly = TRUE)
#print(args)
path.source <- file.path("Documents","CCLEDrug")#("","mnt","work1","users", "bhklab","Projects","sensitivity")# as.character(args[1])
target.folder <- file.path("Documents","CCLEDrug")#file.path("","mnt","work1", "users", "bhklab","Projects","sensitivity") #as.character(args[2])
source(file.path(path.source,"foo.sensitivity.R"))
path.data <- file.path(target.folder , "data")
if(!file.exists(path.data)) { dir.create(path.data, showWarnings=FALSE, recursive=TRUE) }
## download raw sensitivity data
archivn <- "CCLE_NP24.2009_Drug_data_2012.02.20.csv"
if(!file.exists(file.path(path.data, "dwl"))){dir.create(file.path(path.data, "dwl"), showWarnings=FALSE)}
myfn <- file.path(path.data, "dwl", archivn)
if (!file.exists(myfn)) {
dwl.status <- download.file(url="http://www.broadinstitute.org/ccle/downloadFile/DefaultSystemRoot/exp_10/ds_27/CCLE_NP24.2009_Drug_data_2012.02.20.csv?downloadff=true&fileId=2114", destfile=file.path(path.data, "dwl", archivn), quiet=TRUE)
if(dwl.status != 0) { stop("Download failed, please rerun the pipeline!") }
}
require(gdata) || stop("Library gdata is not available!")
ccle.raw.drug.sensitivity <- read.csv(myfn, stringsAsFactors = FALSE)
ccle.drug.sensitivity = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = 6))
rownames(ccle.drug.sensitivity) = 1:nrow(ccle.drug.sensitivity)
colnames(ccle.drug.sensitivity) = c("cellline","drug","AUC","AUC.original","slope","slope0")
template.doses = as.numeric(unlist(strsplit(ccle.raw.drug.sensitivity[1,"Doses..uM."], split=",")))
doses.NO = length(template.doses)
ccle.drug.sensitivity.detail = data.frame(matrix(NA, nrow = nrow(ccle.raw.drug.sensitivity), ncol = doses.NO*2 + 2))
rownames(ccle.drug.sensitivity.detail) = 1:nrow(ccle.drug.sensitivity.detail)
colnames(ccle.drug.sensitivity.detail)[1:2] = c("cellline","drug")
col.index = 2
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("log10_dose_%s",i)
}
for( i in 1: doses.NO)
{
col.index = col.index + 1
colnames(ccle.drug.sensitivity.detail)[col.index] = sprintf("viability_%s",i)
}
for(index in 1:nrow(ccle.raw.drug.sensitivity))
{
ccle.drug.sensitivity[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
ccle.drug.sensitivity.detail[index,"drug"] = ccle.raw.drug.sensitivity[index,"Compound"]
ccle.drug.sensitivity.detail[index,"cellline"] = ccle.raw.drug.sensitivity[index,"Primary.Cell.Line.Name"]
sensitivity = fncomputeSensitvity(as.data.frame(ccle.raw.drug.sensitivity[index,]), template.doses, "ccle")
ccle.drug.sensitivity[index,"AUC"] = sensitivity$AUC
ccle.drug.sensitivity[index,"AUC.original"] = fnComputeAUC.original.CCLE(sensitivity$drug.response)
ccle.drug.sensitivity[index,"slope"] = sensitivity$slope
ccle.drug.sensitivity[index,"slope0"] = sensitivity$slope0
for(k in 1:nrow(sensitivity$drug.response))
{
ccle.drug.sensitivity.detail[index,sprintf("log10_dose_%s",k)] = sensitivity$drug.response[k,"log10doses"]
ccle.drug.sensitivity.detail[index,sprintf("viability_%s",k)] = sensitivity$drug.response[k,"response1"]
}
}
path.result <- file.path(target.folder , "result")
if(!file.exists(path.result)) { dir.create(path.result, showWarnings=FALSE, recursive=TRUE) }
write.csv(ccle.drug.sensitivity, file = file.path(path.result,"ccle_sensitivity_broad.csv"))
write.csv(ccle.drug.sensitivity.detail, file = file.path(path.result,"ccle_sensitivity_detail_broad.csv"))
ccle.drug.sensitivity = ccle.drug.sensitivity[!is.na(ccle.drug.sensitivity$AUC),]
pdf(file = file.path(path.result,"Correlation_sensitivity_measurments.pdf"), height=14, width=14)
par(mfrow = c(2,2))
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope,xlab="AUC", ylab="slope", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$slope0,xlab="AUC", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$slope0), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC, y=ccle.drug.sensitivity$AUC.original,xlab="AUC", ylab="AUC Published", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$AUC,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
myScatterPlot2(x=ccle.drug.sensitivity$AUC.original, y=ccle.drug.sensitivity$slope0,xlab="AUC Published", ylab="slope0", main= sprintf("correlation = %s", round(cor(ccle.drug.sensitivity$slope0,ccle.drug.sensitivity$AUC.original), digits = 2)), pch=16, method="plain")
dev.off()
hist(ccle.drug.sensitivity$slope0, breaks = 100, main="CGP", xlab = "slope")
cgp.bimod = bimod (ccle.drug.sensitivity$slope0, model=c("E", "V"), do.scale=TRUE, verbose=FALSE)
library(mclust)
cgp.bimod = bimod (ccle.drug.sensitivity$slope0, model=c("E", "V"), do.scale=TRUE, verbose=FALSE)
ccle.bimod = bimod (ccle.drug.sensitivity$slope0, model=c("E", "V"), do.scale=TRUE, verbose=FALSE)
qnorm(.99, mean = ccle.bimod$gaussians["mean","cluster.1"], sd = sqrt(ccle.bimod$gaussians["variance","cluster.1"]))
hist(ccle.drug.sensitivity$slope0, breaks = 100, main="CCLE", xlab = "slope")
require(WriteXLS)
?WriteXLS
JaccardIndexBiomarkers <-
function(ccle.sig.rna, gdsc.sig.rna, cell, method, drugs, features, cut.off) {
require(WriteXLS)
all.biomarkers <- list()
jaccard.index <- vector(length=length(drugs))
names(jaccard.index) <- drugs
for(drug in drugs) {
ccle.biomarkers <- ccle.sig.rna[features, drug, ]
colnames(ccle.biomarkers) <- paste0("CCLE_", colnames(ccle.biomarkers))
gdsc.biomarkers <- gdsc.sig.rna[features, drug, ]
colnames(gdsc.biomarkers) <- paste0("GDSC_", colnames(gdsc.biomarkers))
biomarkers <- cbind(ccle.biomarkers, gdsc.biomarkers, "Specificity"="Non significant")
biomarkers[which(as.numeric(biomarkers[,"CCLE_pvalue"]) < cut.off & as.numeric(biomarkers[,"GDSC_pvalue"]) < cut.off), "Specificity"] = "Both"
biomarkers[which(as.numeric(biomarkers[,"CCLE_pvalue"]) < cut.off & as.numeric(biomarkers[,"GDSC_pvalue"]) >= cut.off), "Specificity"] = "CCLE"
biomarkers[which(as.numeric(biomarkers[,"CCLE_pvalue"]) >= cut.off & as.numeric(biomarkers[,"GDSC_pvalue"]) < cut.off), "Specificity"] = "GDSC"
all.biomarkers[[drug]] <- as.data.frame(biomarkers, stringsAsFactors=FALSE)
jaccard.index[drug] <- length(which(biomarkers[, "Specificity"] == "Both"),]) / (length(which(biomarkers[, "Specificity"] == "CCLE"),]) + length(which(biomarkers[, "Specificity"] == "GDSC"),]))
}
return(jaccard.index)
}
JaccardIndexBiomarkers <-
function(ccle.sig.rna, gdsc.sig.rna, cell, method, drugs, features, cut.off) {
require(WriteXLS)
all.biomarkers <- list()
jaccard.index <- vector(length=length(drugs))
names(jaccard.index) <- drugs
for(drug in drugs) {
ccle.biomarkers <- ccle.sig.rna[features, drug, ]
colnames(ccle.biomarkers) <- paste0("CCLE_", colnames(ccle.biomarkers))
gdsc.biomarkers <- gdsc.sig.rna[features, drug, ]
colnames(gdsc.biomarkers) <- paste0("GDSC_", colnames(gdsc.biomarkers))
biomarkers <- cbind(ccle.biomarkers, gdsc.biomarkers, "Specificity"="Non significant")
biomarkers[which(as.numeric(biomarkers[,"CCLE_pvalue"]) < cut.off & as.numeric(biomarkers[,"GDSC_pvalue"]) < cut.off), "Specificity"] = "Both"
biomarkers[which(as.numeric(biomarkers[,"CCLE_pvalue"]) < cut.off & as.numeric(biomarkers[,"GDSC_pvalue"]) >= cut.off), "Specificity"] = "CCLE"
biomarkers[which(as.numeric(biomarkers[,"CCLE_pvalue"]) >= cut.off & as.numeric(biomarkers[,"GDSC_pvalue"]) < cut.off), "Specificity"] = "GDSC"
all.biomarkers[[drug]] <- as.data.frame(biomarkers, stringsAsFactors=FALSE)
jaccard.index[drug] <- length(which(biomarkers[, "Specificity"] == "Both")) / (length(which(biomarkers[, "Specificity"] == "CCLE")) + length(which(biomarkers[, "Specificity"] == "GDSC")))
}
return(jaccard.index)
}
continuous_all <- JaccardIndexBiomarkers(ccle.sig.rna=ccle.sig.rna, gdsc.sig.rna=gdsc.sig.rna2, cell="all", method="continuous", drugs=drugs, features=features, cut.off=0.05)
drugs
.libPaths(())
.libPaths(
)
install.packages("~/Documents/PharmacoGx_1.1.0.tar.gz", repos = NULL, type = "source")
load("~/Documents/cdrug-rebuttals/PSets/CCLE_Nature2013.RData")
ccle.ge <- summarizeMolecularProfiles(pSet=common$CCLE, mDataType="rna", summary.stat="median")
load("~/Documents/cdrug-rebuttals/PSets/CGP_Nature2013.RData")
common <- intersectPSet(pSets = list("CCLE"=CCLE, "CGP"=CGP), intersectOn = c("cell.lines", "drugs"))
common.features <- intersect(rownames(featureInfo(common$CCLE, "rna"))[featureInfo(common$CCLE, "rna")[,"BEST"]==T], rownames(featureInfo(common$CGP, "rna"))[featureInfo(common$CGP, "rna")[,"BEST"]==T])
ccle.ge <- summarizeMolecularProfiles(pSet=common$CCLE, mDataType="rna", summary.stat="median")
ccle.ge <- ccle.ge[common.features,]
ccle.auc <- summarizeSensitivityProfiles(pSet=common$CCLE, sensitivity.measure="auc_published", summary.stat="median")
ccle.ic50 <- summarizeSensitivityProfiles(pSet=common$CCLE, sensitivity.measure="ic50_published", summary.stat="median")
cgp.ge <- summarizeMolecularProfiles(pSet=common$CGP, mDataType="rna", summary.stat="median")
cgp.ge <- cgp.ge[common.features,]
cgp.auc <- summarizeSensitivityProfiles(pSet=common$CGP, sensitivity.measure="auc_published", summary.stat="median")
cgp.ic50 <- summarizeSensitivityProfiles(pSet=common$CGP, sensitivity.measure="ic50_published", summary.stat="median")
require(VennDiagram) || stop("Library gdata is not available!")
mycol <- RColorBrewer::brewer.pal(n=7, name="Set1")
### venn diagram of common cell lines between studies
pdf(file.path("celllines.pdf"), height=4, width=4)
venn.plot <- VennDiagram::draw.pairwise.venn(area1=nrow(CCLE@cell), area2=nrow(CGP@cell), cross.area=nrow(common$CCLE@cell), fill=c(mycol[1], mycol[2]), lty="blank",cex=1.5, cat.cex=1, cat.col = c("black", "black"))
dev.off()
### breaking down common cell lines based on tissue types
require(xtable) || stop("Library xtable is not available!")
require(Hmisc) || stop("Library Hmisc is not available!")
tt <- table(common$CCLE@cell[, "tissueid"])
mm <- cbind("Tissue type"=Hmisc::capitalize(gsub("_", " ", names(tt))), "Number of cell lines"=tt)
mm <- mm[mm[ , 2] != 0, , drop=FALSE]
mm <- mm[order(as.numeric(mm[ , 2]), decreasing=TRUE), , drop=FALSE]
xtable::print.xtable(xtable::xtable(mm), include.rownames=FALSE, floating=FALSE, file="tissue_type.tex", append=FALSE)
#################################################
## Supplementary Figure 1
#scatter plot with red points for missed cell lines in nature study
#################################################
nature2013.common.cellines <- read.csv(file=file.path("data", "HaibeKains_Nature_2013_common_cellines.csv"))[ , 1]
pdf("cgp_ccle_scatterplot_auc_missed_red_points.pdf", height=14, width=14)
par(mfrow=c(4, 4), cex=0.8, las=1)
i <- 0
for(drugn in drugNames(common$CGP)) {
i <- i + 1
xx <- cgp.auc[drugn, ]
yy <- ccle.auc[drugn, ]
xxlim <- c(0, ceiling(max(xx, yy, na.rm=TRUE) * 10) / 10)
yylim <- c(0, ceiling(max(xx, yy, na.rm=TRUE) * 10) / 10)
nnn <- sum(complete.cases(xx, yy))
par(mar=c(4, 4, 3, 1) + 0.1)
mycol <- rep(blues9[7], length(xx))
names(mycol) <- names(xx)
mycol[!is.element(names(mycol), nature2013.common.cellines)] <- "red3"
myScatterPlot(x=xx, y=yy, xlab=ifelse(i > 11, "AUC (CGP)", ""), ylab=ifelse((i %% 4) == 1, "AUC (CCLE)", ""), main=drugn, xlim=xxlim, ylim=yylim, pch=16, method="transparent", transparency=0.75, col=mycol)
abline(a=0, b=1, col="black")
}
dev.off()
setwd("~/Documents/cdrug-rebuttals/")
nature2013.common.cellines <- read.csv(file=file.path("data", "HaibeKains_Nature_2013_common_cellines.csv"))[ , 1]
pdf("cgp_ccle_scatterplot_auc_missed_red_points.pdf", height=14, width=14)
par(mfrow=c(4, 4), cex=0.8, las=1)
i <- 0
for(drugn in drugNames(common$CGP)) {
i <- i + 1
xx <- cgp.auc[drugn, ]
yy <- ccle.auc[drugn, ]
xxlim <- c(0, ceiling(max(xx, yy, na.rm=TRUE) * 10) / 10)
yylim <- c(0, ceiling(max(xx, yy, na.rm=TRUE) * 10) / 10)
nnn <- sum(complete.cases(xx, yy))
par(mar=c(4, 4, 3, 1) + 0.1)
mycol <- rep(blues9[7], length(xx))
names(mycol) <- names(xx)
mycol[!is.element(names(mycol), nature2013.common.cellines)] <- "red3"
myScatterPlot(x=xx, y=yy, xlab=ifelse(i > 11, "AUC (CGP)", ""), ylab=ifelse((i %% 4) == 1, "AUC (CCLE)", ""), main=drugn, xlim=xxlim, ylim=yylim, pch=16, method="transparent", transparency=0.75, col=mycol)
abline(a=0, b=1, col="black")
}
dev.off()
myScatterPlot <- function(x, y, method=c("plain", "transparent", "smooth"), transparency=0.10, smooth.pch=".", pch=16, minp=50, col=blues9[7], smooth.col=c("white", blues9), ...) {
require(grDevices) || stop("Library grDevices is not available!")
method <- match.arg(method)
if (length(col) != length(x)) {
col <- rep(col, length.out=length(x))
}
ccix <- complete.cases(x, y)
x <- x[ccix]
y <- y[ccix]
col <- col[ccix]
if (sum(ccix) < minp) {
## too few points, no transparency, no smoothing
if (sum(ccix) > 0) { rr <- plot(x=x, y=y, col=col, pch=pch, ...) } else { rr <- plot(x=x, y=y, col=col, pch=pch, ...) }
} else {
## enough data points
switch(method,
"plain"={
rr <- plot(x=x, y=y, col=col, pch=pch, ...)
},
"transparent"={
myrgb <- sapply(col, grDevices::col2rgb, alpha=FALSE) / 255
myrgb <- apply(myrgb, 2, function (x, transparency) {
return (rgb(red=x[1], green=x[2], blue=x[3], alpha=transparency, maxColorValue=1))
}, transparency=transparency)
rr <- plot(x=x, y=y, pch=pch, col=myrgb, ...)
},
"smooth"={
rr <- smoothScatter(x=x, y=y, col="lightgray", colramp=colorRampPalette(smooth.col), pch=smooth.pch, ...)
}
)
}
invisible(rr)
}
nature2013.common.cellines <- read.csv(file=file.path("data", "HaibeKains_Nature_2013_common_cellines.csv"))[ , 1]
pdf("cgp_ccle_scatterplot_auc_missed_red_points.pdf", height=14, width=14)
par(mfrow=c(4, 4), cex=0.8, las=1)
i <- 0
for(drugn in drugNames(common$CGP)) {
i <- i + 1
xx <- cgp.auc[drugn, ]
yy <- ccle.auc[drugn, ]
xxlim <- c(0, ceiling(max(xx, yy, na.rm=TRUE) * 10) / 10)
yylim <- c(0, ceiling(max(xx, yy, na.rm=TRUE) * 10) / 10)
nnn <- sum(complete.cases(xx, yy))
par(mar=c(4, 4, 3, 1) + 0.1)
mycol <- rep(blues9[7], length(xx))
names(mycol) <- names(xx)
mycol[!is.element(names(mycol), nature2013.common.cellines)] <- "red3"
myScatterPlot(x=xx, y=yy, xlab=ifelse(i > 11, "AUC (CGP)", ""), ylab=ifelse((i %% 4) == 1, "AUC (CCLE)", ""), main=drugn, xlim=xxlim, ylim=yylim, pch=16, method="transparent", transparency=0.75, col=mycol)
abline(a=0, b=1, col="black")
}
dev.off()
ge.between <- cor(exprs(ccle.ge), exprs(cgp.ge), method="spearman", use="pairwise.complete.obs")
library(Biobase)
ge.between <- cor(exprs(ccle.ge), exprs(cgp.ge), method="spearman", use="pairwise.complete.obs")
CGP <- downloadPSet("CGP_Nature2013")
CCLE <- downloadPSet("CCLE")
seq1 <- seq(1:6)
mat1 <- matrix(seq1, 2)
mat2 <- matrix(seq1, 2, byrow = T)
mat1/mat2
mat1
mat2
mat1*mat2
